"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import dj_database_url
from dotenv import load_dotenv
from pathlib import Path



# Build paths inside the project like this: BASE_DIR / 'subdir'.
load_dotenv()
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6@%(!o6yh!(pbz9fxuc(z=fbdbkz11laktg!7t6w46b!94roeu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#DEBUG = False
ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
    "gearshare-69bb289731f2.herokuapp.com",

]
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:8000',
]


# Application definition

INSTALLED_APPS = [
    "gearshare.apps.GearshareConfig",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required by allauth
    'bootstrap5',
    'django_bootstrap5',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django.contrib.humanize',
]

# Google provider configuration
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],  # What data to request from Google
        'AUTH_PARAMS': {'access_type': 'online'},  # Online access (not offline refresh tokens)
    }
}

STATICFILES_DIRS = [
    BASE_DIR / 'gearshare/static',  # Add the path to your static folder here
]
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATIC_URL = '/static/'
'''STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),  # Ensure this folder exists
]'''




MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # ADD THIS
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "allauth.account.middleware.AccountMiddleware",
]


ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'gearshare/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'gearshare.context_processors.google_auth',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'), 
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Override with PostgreSQL if DATABASE_URL is set (Heroku) for deployment
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600,
        ssl_require=True
    )


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'EST'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Site ID for django-allauth (required)
SITE_ID = 2

# Authentication backends
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # For Django admin
    'allauth.account.auth_backends.AuthenticationBackend',  # For allauth
)

LOGIN_REDIRECT_URL = '/'  # Where users go after login
LOGOUT_REDIRECT_URL = '/login/'

ACCOUNT_LOGOUT_ON_GET = False


#### GOOGLE AUTH ####
"""
*  REFERENCES
*  Title: The simplest way to add Google sign-in to your Django app ✍️
*  Author: Tom Dekan
*  Date: Jan 11, 2024
*  URL: https://tomdekan.com/articles/google-sign-in
"""

GOOGLE_OAUTH_CLIENT_ID = os.getenv('GOOGLE_OAUTH_CLIENT_ID')
if not GOOGLE_OAUTH_CLIENT_ID:
    raise ValueError(

        'GOOGLE_OAUTH_CLIENT_ID is missing.\n'
        'Please create place the following line in \'mysite/.env\':\n'
        'GOOGLE_OAUTH_CLIENT_ID=<your_client_id>'
    )
GOOGLE_OAUTH_REDIRECT = os.getenv('GOOGLE_OAUTH_REDIRECT')
if not GOOGLE_OAUTH_REDIRECT:
    raise ValueError(
        'GOOGLE_OAUTH_REDIRECT is missing.\n'
        'If in development, please create place the following line in \'mysite/.env\':\n'
        'GOOGLE_OAUTH_REDIRECT=http://localhost:8000/auth_receiver\n'
        'If in production, please set the environment in Heroku.'
    )

# We need these lines below to allow the Google sign in popup to work.
SECURE_REFERRER_POLICY = 'no-referrer-when-downgrade'
SECURE_CROSS_ORIGIN_OPENER_POLICY = "same-origin-allow-popups"


#### STORED LIBRARIAN USERS ####
LIBRARIAN_EMAILS = {"gearshare.librarian@gmail.com"}

#AWS configureation

AWS_ACCESS_KEY_ID = os.getenv('AWS_KEY')  # Replace with your AWS access key
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_KEY')  # Replace with your AWS secret key
AWS_STORAGE_BUCKET_NAME = 'gearshare-2025swe-bucket'  # Replace with your S3 bucket name
AWS_S3_REGION_NAME = 'us-east-2'  # Replace with your S3 region (e.g., 'us-east-1')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_S3_FILE_OVERWRITE = False  # Prevent overwriting files with the same name
#try something 
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
# Storage backends
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "location": "media",
            "file_overwrite": False,
        },
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
# this conflict with the default django storage backend
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'